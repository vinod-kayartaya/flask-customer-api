pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'learnwithvinod/flask-customer-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        VENV_NAME = 'venv'
        // Define Docker Hub credentials ID (configured in Jenkins)
        DOCKER_CREDENTIALS = credentials('docker-login')
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                bat """
                    python -m venv %VENV_NAME%
                    call %VENV_NAME%\\Scripts\\activate.bat
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                """
            }
        }

        stage('Run Tests') {
            steps {
                bat """
                    call %VENV_NAME%\\Scripts\\activate.bat
                    python -m pytest tests\\
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    bat "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Integration Test') {
            steps {
                script {
                    // Start the container
                    bat "docker run -d -p 5000:5000 --name flask-test-${BUILD_NUMBER} ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Wait for application to start
                    bat "timeout /t 10 /nobreak"
                    
                    // Test the endpoint using PowerShell's Invoke-WebRequest
                    bat """
                        powershell -command "try { \
                            \$response = Invoke-WebRequest -Uri 'http://localhost:5000/api/customers' -UseBasicParsing; \
                            if (\$response.StatusCode -eq 200) { exit 0 } else { exit 1 } \
                        } catch { exit 1 }"
                    """
                }
            }
            post {
                always {
                    // Cleanup: Stop and remove the test container
                    bat "docker stop flask-test-${BUILD_NUMBER} || ver>nul"
                    bat "docker rm flask-test-${BUILD_NUMBER} || ver>nul"
                }
            }
        }

        stage('Publish to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub with Windows syntax
                    bat "echo %DOCKER_CREDENTIALS_PSW%| docker login -u %DOCKER_CREDENTIALS_USR% --password-stdin"
                    
                    // Push the image
                    bat "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Tag and push as latest
                    bat "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    bat "docker push ${DOCKER_IMAGE}:latest"
                }
            }
            post {
                always {
                    // Logout from Docker Hub
                    bat "docker logout"
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            bat "if exist %VENV_NAME% rmdir /s /q %VENV_NAME%"
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully! Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
}
