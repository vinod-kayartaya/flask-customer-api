pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'learnwithvinod/flask-customer-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        VENV_NAME = 'venv'
        // Define Docker Hub credentials ID (configured in Jenkins)
        DOCKER_CREDENTIALS = credentials('docker-login')
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                sh """
                    python3 -m venv ${VENV_NAME}
                    . ${VENV_NAME}/bin/activate
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                """
            }
        }

        stage('Run Tests') {
            steps {
                sh """
                    . ${VENV_NAME}/bin/activate
                    python -m pytest tests/
                """
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Integration Test') {
            steps {
                script {
                    // Start the container
                    sh "docker run -d -p 5000:5000 --name flask-test-${BUILD_NUMBER} ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Wait for application to start
                    sh 'sleep 10'
                    
                    // Test the endpoint
                    sh 'curl -f http://localhost:5000/api/customers || exit 1'
                }
            }
            post {
                always {
                    // Cleanup: Stop and remove the test container
                    sh "docker stop flask-test-${BUILD_NUMBER} || true"
                    sh "docker rm flask-test-${BUILD_NUMBER} || true"
                }
            }
        }

        stage('Publish to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub
                    sh "echo ${DOCKER_CREDENTIALS_PSW} | docker login -u ${DOCKER_CREDENTIALS_USR} --password-stdin"
                    
                    // Push the image
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    
                    // Tag and push as latest
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    sh "docker push ${DOCKER_IMAGE}:latest"
                }
            }
            post {
                always {
                    // Logout from Docker Hub
                    sh 'docker logout'
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            sh "rm -rf ${VENV_NAME}"
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully! Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo 'Pipeline failed! Check the logs for details.'
        }
    }
} 